apply last db migrations
------------------------
bundle exec rake db:migrate
reverse : bundle exec rake db:rollback

Create a migration
------------------
rails generate migration add_password_digest_to_users password_digest:string

Generate a model
----------------

synch test db with dev DB (in terms of structure)
-------------------------------------------------
bundle exec rake db:test:prepare

load Fake data in dev DB
------------------------
bundle exec rake db:(re)seed

Generate bundler stubs
----------------------
bundle --binstubs=./bundler_stubs

Switch OS
---------
bundle exec rake refresh_ws:<OS>

Annotate models / routes
------------------------
bundle exec annotate -p before (--model-dir dir)
bundle exec annotate -r

Generate "request" tests
------------------------
rails generate integration_test <controller_name> --integration-tool=rspec

Heroku commands
---------------
heroku create --stack cedar
git push heroku master
git push heroku
heroku logs
heroku config:add RECAPTCHA_PUBLIC_KEY=''
heroku config:add RECAPTCHA_PRIVATE_KEY=''

GIT
---
go back to last commit : 												git reset --hard HEAD
remove untracked files (but not ignored files) : git clean -f -d
get a new branch from GitHub : 									git checkout -b <branch> origin/<branch>
remove uncommited changes on a single file : 		git checkout -- <filename>
create new branch : 														git checkout -b <branch>
push a new branch to GitHub : 									git push origin <branch>
merge a branch (checkout the main first) :			git merge <branch>
delete a branch (locally) :											git branch -D <branch>
delete a branch (on GitHub) :										git push origin --delete <branch>

Production
----------
bundle exec rake:* RAILS_ENV=production
bundle exec rake i18n:js:export
assets pre-compilation : bundle exec rake assets:precompile
rails s -e production
heroku pg:reset (to drop / create db)

To be automated
---------------
#Remove the carrierwave upload files older than one day :
CarrierWave.clean_cached_files!

#recreate versions for fog storage
YourModel.all.each do |ym| 
  begin
    ym.your_uploader.cache_stored_file! 
    ym.your_uploader.retrieve_from_cache!(ym.your_uploader.cache_name) 
    ym.your_uploader.recreate_versions! 
    ym.save! 
  rescue => e
    puts  "ERROR: #{CLASS}: #{object.id} -> #{e.to_s}"
  end
end